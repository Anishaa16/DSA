assign 3
 
tree data structure

# include <iostream>
# include <cstdlib>
# include <string.h>
using namespace std;




/*
 * Node Declaration
 */
struct node
{
    char label[10];
    int ch_count;
    struct node *child[10];
}*root;





/*
 * Class Declaration
 */
class BST
{
    public:
        void create_tree();  
 void display(node * r1);
     
        BST()
        {
            root = NULL;
        }
};




void BST::create_tree()
{
 int tbooks,tchapters,i,j,k;
 root = new node();
 cout<<"Enter name of book";
 cin>>root->label;
 cout<<"Enter no. of chapters in book";
 cin>>tchapters; 
 root->ch_count = tchapters;


 for(i=0;i<tchapters;i++)
 {
  root->child[i] = new node;
  cout<<"Enter Chapter name\n";
  cin>>root->child[i]->label;   
  cout<<"Enter no. of sections in  Chapter: "<<root->child[i]->label;
  cin>>root->child[i]->ch_count;



  for(j=0;j<root->child[i]->ch_count;j++)
  {
   root->child[i]->child[j] = new node;
   cout<<"Enter Section "<<j+1<<"name\n";
   cin>>root->child[i]->child[j]->label;   
   //cout<<"Enter no. of subsections in "<<r1->child[i]->child[j]->label;
   //cin>>r1->child[i]->ch_count;
  }  

 }

}


void BST::display(node * r1)
{
 int i,j,k,tchapters;
 if(r1 != NULL)
 { 
  cout<<"\n-----Book Hierarchy---";

  cout<<"\n Book title : "<<r1->label;
  tchapters = r1->ch_count;
  for(i=0;i<tchapters;i++)
  {
  
   cout<<"\n  Chapter "<<i+1;
   cout<<" "<<r1->child[i]->label;   
    cout<<"\n Sections";
   for(j=0;j<r1->child[i]->ch_count;j++)
   {
    //cin>>r1->child[i]->child[j]->label;   
    cout<<"\n  "<<r1->child[i]->child[j]->label;
   }  

  }
 }
}


/*
 * Main Contains Menu
 */
int main()
{
    int choice;
    BST bst;
    while (1)
    {
        cout<<"-----------------"<<endl;
        cout<<"Book Tree Creation"<<endl;
        cout<<"-----------------"<<endl;
        cout<<"1.Create"<<endl;
        cout<<"2.Display"<<endl;
        cout<<"3.Quit"<<endl;
        cout<<"Enter your choice : ";
        cin>>choice;
        switch(choice)
        {
        case 1:
              bst.create_tree();
        case 2:
              bst.display(root);
            break;
        case 3:
            exit(1);
        default:
            cout<<"Wrong choice"<<endl;
        }
    }
}






DFS N BFS

#include <iostream>
#include <cstdlib>
using namespace std;

int cost[10][10], i, j, k, n, qu[10], front, rear, v, visit[10], visited[10];
int stk[10], top, visit1[10], visited1[10];

int main()
{
    int m;
    cout << "Enter number of vertices : ";
    cin >> n;
    cout << "Enter number of edges : ";
    cin >> m;

    cout << "\nEDGES :\n";
    for (k = 1; k <= m; k++)
    {
        cin >> i >> j;
        cost[i][j] = 1;
        cost[j][i] = 1;
    }

    //display function
    cout << "The adjacency matrix of the graph is : " << endl;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << " " << cost[i][j];
        }
        cout << endl;
    }

    cout << "Enter initial vertex : ";
    cin >> v;
    cout << "The BFS of the Graph is\n";
    cout << v<<endl;
    visited[v] = 1;
    k = 1;
    while (k < n)
    {
        for (j = 1; j <= n; j++)
            if (cost[v][j] != 0 && visited[j] != 1 && visit[j] != 1)
            {
                visit[j] = 1;
                qu[rear++] = j;
            }
        v = qu[front++];
        cout << v << " ";
        k++;
        visit[v] = 0;
        visited[v] = 1;
    }

    cout <<endl<<"Enter initial vertex : ";
    cin >> v;
    cout << "The DFS of the Graph is\n";
    cout << v<<endl;
    visited[v] = 1;
    k = 1;
    while (k < n)
    {
        for (j = n; j >= 1; j--)
            if (cost[v][j] != 0 && visited1[j] != 1 && visit1[j] != 1)
            {
                visit1[j] = 1;
                stk[top] = j;
                top++;
            }
        v = stk[--top];
        cout << v << " ";
        k++;
        visit1[v] = 0;
        visited1[v] = 1;
    }

    return 0;
}



